{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/anjan/workspace/firebaseAuth/components/Test/index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { decrementCounter, incrementCounter } from \"../../redux/actions/counterActions\"; // import Button from \"@material-ui/core/Button\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  _createClass(App, null, [{\n    key: \"getStaticProps\",\n    // If you build and start the app, the date returned here will have the same\n    // value for all requests, as this method gets executed at build time.\n    value: function () {\n      var _getStaticProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {\n                  props: {\n                    initialReduxState: {\n                      lastUpdate: Date.now(),\n                      light: false\n                    }\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getStaticProps() {\n        return _getStaticProps.apply(this, arguments);\n      }\n\n      return getStaticProps;\n    }() // static getInitialProps({ store }) {}\n\n  }]);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 7\n        }\n      }, __jsx(\"button\", {\n        onClick: this.props.incrementCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, \"Increment\"), __jsx(\"button\", {\n        onClick: this.props.decrementCounter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, \"Decrement\"), __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, this.props.counter));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    counter: state.counter.value\n  };\n};\n\nvar mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // export default (App);","map":{"version":3,"sources":["/Users/anjan/workspace/firebaseAuth/components/Test/index.js"],"names":["React","connect","decrementCounter","incrementCounter","App","props","initialReduxState","lastUpdate","Date","now","light","counter","Component","mapStateToProps","state","value","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,gBADF,EAEEC,gBAFF,QAGO,oCAHP,C,CAKA;;IAEMC,G;;;;;;;AACJ;AACA;;;;;;;iDAIS;AACLC,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,iBAAiB,EAAE;AACjBC,sBAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL,EADK;AAEjBC,sBAAAA,KAAK,EAAE;AAFU;AADd;AADF,iB;;;;;;;;;;;;;;;QAUT;;;;AAEA,eAAYL,KAAZ,EAAmB;AAAA;;AAAA,6BACXA,KADW;AAElB;;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE,KAAKA,KAAL,CAAWF,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAQ,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWH,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKG,KAAL,CAAWM,OAAhB,CAHF,CADF;AAQD;;;;EA/BeX,KAAK,CAACY,S;;AAkCxB,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCH,IAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,CAAcI;AADW,GAAZ;AAAA,CAAxB;;AAIA,IAAMC,kBAAkB,GAAG;AACzBb,EAAAA,gBAAgB,EAAEA,gBADO;AAEzBD,EAAAA,gBAAgB,EAAEA;AAFO,CAA3B;AAIA,eAAeD,OAAO,CAACY,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CZ,GAA7C,CAAf,C,CACA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  decrementCounter,\n  incrementCounter,\n} from \"../../redux/actions/counterActions\";\n\n// import Button from \"@material-ui/core/Button\";\n\nclass App extends React.Component {\n  // If you build and start the app, the date returned here will have the same\n  // value for all requests, as this method gets executed at build time.\n  static async getStaticProps() {\n    // Note that in this case we're returning the state directly, without creating\n    // the store first (like in /pages/ssr.js), this approach can be better and easier\n    return {\n      props: {\n        initialReduxState: {\n          lastUpdate: Date.now(),\n          light: false,\n        },\n      },\n    };\n  }\n\n  // static getInitialProps({ store }) {}\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.props.incrementCounter}>Increment</button>\n        <button onClick={this.props.decrementCounter}>Decrement</button>\n        <h1>{this.props.counter}</h1>\n        {/* <Button variant=\"contained\">Default</Button> */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  counter: state.counter.value,\n});\n\nconst mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// export default (App);\n"]},"metadata":{},"sourceType":"module"}