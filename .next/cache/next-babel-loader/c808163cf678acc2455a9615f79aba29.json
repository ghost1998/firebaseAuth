{"ast":null,"code":"var _jsxFileName = \"/Users/anjan/workspace/firebaseAuth/components/Test/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { decrementCounter, incrementCounter } from \"../../redux/actions/counterActions\"; // import Button from \"@material-ui/core/Button\";\n\nclass App extends React.Component {\n  // If you build and start the app, the date returned here will have the same\n  // value for all requests, as this method gets executed at build time.\n  static async getStaticProps() {\n    // Note that in this case we're returning the state directly, without creating\n    // the store first (like in /pages/ssr.js), this approach can be better and easier\n    return {\n      props: {\n        initialReduxState: {\n          lastUpdate: Date.now(),\n          light: false\n        }\n      }\n    };\n  } // static getInitialProps({ store }) {}\n\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      onClick: this.props.incrementCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Increment\"), __jsx(\"button\", {\n      onClick: this.props.decrementCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"Decrement\"), __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, this.props.counter));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter.value\n});\n\nconst mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // export default (App);","map":{"version":3,"sources":["/Users/anjan/workspace/firebaseAuth/components/Test/index.js"],"names":["React","connect","decrementCounter","incrementCounter","App","Component","getStaticProps","props","initialReduxState","lastUpdate","Date","now","light","constructor","render","counter","mapStateToProps","state","value","mapDispatchToProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,gBADF,EAEEC,gBAFF,QAGO,oCAHP,C,CAKA;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAChC;AACA;AACA,eAAaC,cAAb,GAA8B;AAC5B;AACA;AACA,WAAO;AACLC,MAAAA,KAAK,EAAE;AACLC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL,EADK;AAEjBC,UAAAA,KAAK,EAAE;AAFU;AADd;AADF,KAAP;AAQD,GAd+B,CAgBhC;;;AAEAC,EAAAA,WAAW,CAACN,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAKP,KAAL,CAAWJ,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKI,KAAL,CAAWL,gBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKK,KAAL,CAAWQ,OAAhB,CAHF,CADF;AAQD;;AA/B+B;;AAkClC,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCF,EAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcG;AADW,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;AACzBhB,EAAAA,gBAAgB,EAAEA,gBADO;AAEzBD,EAAAA,gBAAgB,EAAEA;AAFO,CAA3B;AAIA,eAAeD,OAAO,CAACe,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,GAA7C,CAAf,C,CACA","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  decrementCounter,\n  incrementCounter,\n} from \"../../redux/actions/counterActions\";\n\n// import Button from \"@material-ui/core/Button\";\n\nclass App extends React.Component {\n  // If you build and start the app, the date returned here will have the same\n  // value for all requests, as this method gets executed at build time.\n  static async getStaticProps() {\n    // Note that in this case we're returning the state directly, without creating\n    // the store first (like in /pages/ssr.js), this approach can be better and easier\n    return {\n      props: {\n        initialReduxState: {\n          lastUpdate: Date.now(),\n          light: false,\n        },\n      },\n    };\n  }\n\n  // static getInitialProps({ store }) {}\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.props.incrementCounter}>Increment</button>\n        <button onClick={this.props.decrementCounter}>Decrement</button>\n        <h1>{this.props.counter}</h1>\n        {/* <Button variant=\"contained\">Default</Button> */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  counter: state.counter.value,\n});\n\nconst mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// export default (App);\n"]},"metadata":{},"sourceType":"module"}