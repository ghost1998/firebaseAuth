{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { decrementCounter, incrementCounter } from \"../../redux/actions/counterActions\"; // import Button from \"@material-ui/core/Button\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  _createClass(App, null, [{\n    key: \"getStaticProps\",\n    // If you build and start the app, the date returned here will have the same\n    // value for all requests, as this method gets executed at build time.\n    value: function () {\n      var _getStaticProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", {\n                  props: {\n                    initialReduxState: {\n                      lastUpdate: Date.now(),\n                      light: false\n                    }\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getStaticProps() {\n        return _getStaticProps.apply(this, arguments);\n      }\n\n      return getStaticProps;\n    }() // static getInitialProps({ store }) {}\n\n  }]);\n\n  function App(props) {\n    _classCallCheck(this, App);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(\"button\", {\n        onClick: this.props.incrementCounter\n      }, \"Increment\"), __jsx(\"button\", {\n        onClick: this.props.decrementCounter\n      }, \"Decrement\"), __jsx(\"h1\", null, this.props.counter));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    counter: state.counter.value\n  };\n};\n\nvar mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // export default (App);","map":null,"metadata":{},"sourceType":"module"}