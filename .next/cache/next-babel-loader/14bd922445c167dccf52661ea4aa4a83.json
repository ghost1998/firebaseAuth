{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { decrementCounter, incrementCounter } from \"../../redux/actions/counterActions\"; // import Button from \"@material-ui/core/Button\";\n\nclass App extends React.Component {\n  // If you build and start the app, the date returned here will have the same\n  // value for all requests, as this method gets executed at build time.\n  static async getStaticProps() {\n    // Note that in this case we're returning the state directly, without creating\n    // the store first (like in /pages/ssr.js), this approach can be better and easier\n    return {\n      props: {\n        initialReduxState: {\n          lastUpdate: Date.now(),\n          light: false\n        }\n      }\n    };\n  } // static getInitialProps({ store }) {}\n\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"button\", {\n      onClick: this.props.incrementCounter\n    }, \"Increment\"), __jsx(\"button\", {\n      onClick: this.props.decrementCounter\n    }, \"Decrement\"), __jsx(\"h1\", null, this.props.counter));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter.value\n});\n\nconst mapDispatchToProps = {\n  incrementCounter: incrementCounter,\n  decrementCounter: decrementCounter\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // export default (App);","map":null,"metadata":{},"sourceType":"module"}