{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DECREMENT_COUNTER, INCREMENT_COUNTER } from \"../actions/counterActions\";\n\nconst counterReducer = (state = {\n  value: 0\n}, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value + 3\n      });\n\n    case DECREMENT_COUNTER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: state.value - 1\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default counterReducer;","map":{"version":3,"sources":["/Users/anjan/workspace/firebaseAuth/redux/reducers/counterReducer.js"],"names":["DECREMENT_COUNTER","INCREMENT_COUNTER","counterReducer","state","value","action","type"],"mappings":";;;;;;AAAA,SACEA,iBADF,EAEEC,iBAFF,QAGO,2BAHP;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAT,EAAuBC,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,iBAAL;AACE,6CAAYE,KAAZ;AAAmBC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAxC;;AACF,SAAKJ,iBAAL;AACE,6CAAYG,KAAZ;AAAmBC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAxC;;AACF;AACE,+BAAYD,KAAZ;AANJ;AAQD,CATD;;AAWA,eAAeD,cAAf","sourcesContent":["import {\n  DECREMENT_COUNTER,\n  INCREMENT_COUNTER,\n} from \"../actions/counterActions\";\n\nconst counterReducer = (state = { value: 0 }, action) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return { ...state, value: state.value + 3 };\n    case DECREMENT_COUNTER:\n      return { ...state, value: state.value - 1 };\n    default:\n      return { ...state };\n  }\n};\n\nexport default counterReducer;\n"]},"metadata":{},"sourceType":"module"}